using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.IO;
using JAY.XMLCore;

namespace JAY.PegaseCore
{	
    /// <summary>
    /// Classe décrivant un mode d'exploitation
    /// La collection des modes d'exploitation est détenue par la classe OptionsLogiciels
    /// </summary>
    public class ModeExploitation
    {
        #region Constantes

        public const Int32 MaxSelecteurByMode = 6;
        public const Int32 MaxInfoByMode = 6;
        public const Int32 MAX_MASK_BY_MODE = 4;
        public const String MODE = "mode";
        public const String ALL = "all";

        #endregion

        // Variables
        #region Variables

        private XMLCore.XMLProcessing _navMode;
        private XMLCore.XMLProcessing _navInterverouillage;
        private XMLCore.XMLProcessing _navSelecteurs;
        private XMLCore.XMLProcessing _navRetoursInfo;
        private XMLCore.XMLProcessing _navFormules;
        private XMLCore.XMLProcessing _navUserModeMasks;
        private ObservableCollection<InfoByMode> _labelsInfoByPos;
        private ObservableCollection<ObservableCollection<SelecteurLabel>> _labelsSelecteurByPos;
        private ObservableCollection<Information> _information;
        private ObservableCollection<Selecteur> _selecteurs;
        private ObservableCollection<Formule> _formules;
        private SelecteurLabel _modeLabel;
        private String _commentaire;
        private MaskUserMode[] _userModeMask;
        private Boolean _maskHMDispo;
        private ObservableCollection<OrganCommand> _organsUsedInEquation;   // La liste des organes utilisés dans l'équation
        private ObservableCollection<OrganCommand> _organsUsedInSelecteur;  // La liste des organes utilisés dans les sélecteurs, y compris les sélecteurs de mode

        #endregion

        // Propriétés
        #region Propriétés

        /// <summary>
        /// La liste des organes utilisés dans les équations, mode universel compris
        /// </summary>
        public ObservableCollection<OrganCommand> OrgansUsedInEquation
        {
            get
            {
                if (this._organsUsedInEquation == null)
                {
                    this._organsUsedInEquation = new ObservableCollection<OrganCommand>();
                }

                return this._organsUsedInEquation;
            }
        } // endProperty: OrgansUsedInEquation

        /// <summary>
        /// La liste des organes utilisés dans les sélecteurs
        /// </summary>
        public ObservableCollection<OrganCommand> OrganUsedInSelecteur
        {
            get
            {
                if (this._organsUsedInSelecteur == null)
                {
                    this._organsUsedInSelecteur = new ObservableCollection<OrganCommand>();
                }

                return this._organsUsedInSelecteur;
            }
        } // endProperty: OrganUsedInSelecteur

        /// <summary>
        /// Le masque défini pour l'homme mort est disponible (true) ou non (false)
        /// </summary>
        public Boolean MaskHMDispo
        {
            get
            {
                return this._maskHMDispo;
            }
            set
            {
                this._maskHMDispo = value;
            }
        } // endProperty: MaskHMDispo

        /// <summary>
        /// Le commentaire lié au mode
        /// </summary>
        public String Commentaire
        {
            get
            {
                if (this._commentaire == null)
                {
                    this._commentaire = "";
                }
                return this._commentaire;
            }
            private set
            {
                this._commentaire = value;
            }
        } // endProperty: Commentaire

        /// <summary>
        /// Les formules liées au mode
        /// </summary>
        public ObservableCollection<Formule> Formules
        {
            get
            {
                if (this._formules == null)
                {
                    this._formules = new ObservableCollection<Formule>();
                }
                return this._formules;
            }
            private set
            {
                this._formules = value;
            }
        } // endProperty: Formules

        /// <summary>
        /// Définir la position du mode (0 à 31)
        /// -1 si le mode est non défini
        /// </summary>
        public Int32 Position
        {
            get;
            set;
        } // endProperty: Position

        /// <summary>
        /// Le nom du mode d'exploitation
        /// </summary>
        public SelecteurLabel ModeLabel
        {
            get
            {
                if (this._modeLabel == null)
                {
                    String ID = PegaseData.Instance.OLogiciels.GetLibelSelecteurID();
                    SelecteurLabel sl = new SelecteurLabel(ID);
                    PegaseData.Instance.OLogiciels.LibelSelecteurs.Add(sl);
                    sl.LibelSelecteur = "----";
                    this._modeLabel = sl;
                }
                return this._modeLabel;
            }
            set
            {
                // initialisation du lien vers le libellé
                value.LibelSelecteur = "----";
                this._modeLabel = value;
            }
        } // endProperty: ModeName

        /// <summary>
        /// Les sélecteurs associés à ce mode
        /// </summary>
        public ObservableCollection<Selecteur> Selecteurs
        {
            get
            {
                return this._selecteurs;
            }
            set
            {
                this._selecteurs = value;
            }
        } // endProperty: Selecteurs

        /// <summary>
        /// Les labels des sélecteurs pour chacune des positions
        /// </summary>
        public ObservableCollection<ObservableCollection<SelecteurLabel>> LabelsSelecteurByPos
        {
            get
            {
                return this._labelsSelecteurByPos;
            }
            private set
            {
                this._labelsSelecteurByPos = value;
            }
        } // endProperty: LabelsSelecteurByPos

        /// <summary>
        /// Les retours d'informations pour ce mode d'exploitation 
        /// </summary>
        public ObservableCollection<Information> Informations
        {
            get
            {
                return this._information;
            }
            private set
            {
                this._information = value;
            }
        } // endProperty: Informations

        /// <summary>
        /// La liste des labels d'informations pour le mode
        /// </summary>
        public ObservableCollection<InfoByMode> LabelsInfoByPos
        {
            get
            {
                return this._labelsInfoByPos;
            }
            private set
            {
                this._labelsInfoByPos = value;
            }
        } // endProperty: LabelsInfoByPos

        /// <summary>
        /// Les masques par utilisateur des organes, pour ce mode
        /// </summary>
        public MaskUserMode[] UserModeMask
        {
            get
            {
                return this._userModeMask;
            }
            set
            {
                this._userModeMask = value;
            }
        } // endProperty: UserModeMask

        #endregion

        // Constructeur
        #region Constructeur

        public ModeExploitation(XElement Mode, XElement Interverouillage, XElement Selecteurs, XElement RetoursInfo, XElement Formules, XElement UserModeMasks)
        {
            // initialisation des navigateurs XML
            this._navMode = new XMLCore.XMLProcessing();
            this._navMode.OpenXML(Mode);

            this._navInterverouillage = new XMLCore.XMLProcessing();
            this._navInterverouillage.OpenXML(Interverouillage);

            this._navFormules = new XMLCore.XMLProcessing();
            this._navFormules.OpenXML(Formules);

            this._navRetoursInfo = new XMLCore.XMLProcessing();
            this._navRetoursInfo.OpenXML(RetoursInfo);

            this._navSelecteurs = new XMLCore.XMLProcessing();
            this._navSelecteurs.OpenXML(Selecteurs);

            if (UserModeMasks != null)
            {
                this._navUserModeMasks = new XMLCore.XMLProcessing();
                this._navUserModeMasks.OpenXML(UserModeMasks);
            }

            // initialiser l'ensemble des données
            this.InitSelecteur();
            this.InitInformation();
            this.InitLabelsInfoByPos();
            this.InitLabelsSelecteurByPos();
            this.InitFormules();
            this.InitUserModeMask();
            this.InitMode();
        }

        public ModeExploitation(Int32 NumMode)
        {
            // 1 - Numero du mode
            this.Position = NumMode;

            // 2 - Selecteurs
            this.Selecteurs = new ObservableCollection<Selecteur>();
            for (int i = 0; i < MaxSelecteurByMode; i++)
            {
                this.Selecteurs.Add(null);
            }

            // 3 - Préparer les emplacements des libellés sélecteurs
            this.LabelsSelecteurByPos = new ObservableCollection<ObservableCollection<SelecteurLabel>>();
            for (int i = 0; i < MaxSelecteurByMode; i++)
            {
                this.LabelsSelecteurByPos.Add(new ObservableCollection<SelecteurLabel>());
            }

            // 4 - Retours d'information
            this.Informations = new ObservableCollection<Information>();
            for (int i = 0; i < MaxInfoByMode; i++)
            {
                this.Informations.Add(null);
            }

            // 5 - Préparer les emplacements des libellés des retours d'information
            this.LabelsInfoByPos = new ObservableCollection<InfoByMode>();
            for (int i = 0; i < MaxInfoByMode; i++)
            {
                this.LabelsInfoByPos.Add(null);
            }

            // 6 - Préparer la zone des équations
            this.Formules = new ObservableCollection<Formule>();

            // 7 - Préparer les Masques par utilisateur
            this.UserModeMask = new MaskUserMode[4];
            for (int i = 0; i < this.UserModeMask.Length; i++)
            {
                this.UserModeMask[i] = new MaskUserMode((UInt32)0xFFFFFFFF, (UInt16)0xFFFF);
            }
        }
       
        /// <summary>
        /// L'affichage temporaire des équations
        /// </summary>
        public String EquationsTemp
        {
            get
            {
                String Result = "";

                foreach (var formule in this.Formules)
                {
                    String f = String.Format("Function {0}\n", formule.Fonction);
                    foreach (var equation in formule.Equations)
                    {
                        f = f + String.Format("     {0}\n", equation.TextEquation);
                    }
                    f = f + "End Function\n";
                    Result += f;
                }

                return Result;
            }
        } // endProperty: EquationsTemp

        #endregion

        // Méthodes
        #region Méthodes
        
        /// <summary>
        /// Mettre à jour la liste des organs utilisés dans les équations
        /// </summary>
        public void MajOrgansUsedInEquation ( )
        {
            // Mettre à jour à partir des formules universelles
            this.MajOrgansUsedInEquation(PegaseData.Instance.ParamHorsMode.Formules, ALL);

            // Mettre à jour à partir des formules du mode
            this.MajOrgansUsedInEquation(this.Formules, MODE);
        } // endMethod: MajOrgansUsedInEquation

        /// <summary>
        /// Mettre à jour la liste des organs utilisés dans les équations à partir d'une collection de formule
        /// </summary>
        private void MajOrgansUsedInEquation ( ObservableCollection<Formule> Formules, String group )
        {
            OrganCommand organ;
            this.OrgansUsedInEquation.Clear();
            // pour toutes les formules
            foreach (var formule in Formules)
            {
                // pour toutes les équations
                foreach (var equation in formule.Equations)
                {
                    // exploser l'équation
                    String[] elements = equation.TextEquation.Split(new Char[]{' '});
                    // vérifier pour chacun des termes s'il s'agit d'un organe
                    foreach (var element in elements)
                    {
                        if (element.Length > 4)
                        {
                            organ = this.GetOrganeByMnemologique(element);
                            if (organ != null)
                            {
                                if (!this.VerifyIfOrganExistInCollection(this.OrgansUsedInEquation, organ))
                                {
                                    organ.ModeUsed = group;
                                    this.OrgansUsedInEquation.Add(organ);
                                }
                            }
                        }
                    }
                }
            }
        } // endMethod: MajOrgansUsedInEquation

        /// <summary>
        /// Mettre à jour la liste des organes utilisés pour les sélecteurs électroniques
        /// </summary>
        public void MajOrgansUsedInSelecteur ( )
        {
            this.OrganUsedInSelecteur.Clear();
            OrganCommand organ;

            foreach (var selecteur in this.Selecteurs)
            {
                if (selecteur != null)
                {
                    // vérifier quels sont les boutons utilisés

                    organ = this.GetOrganeByName(selecteur.BtIncrementer);
                    if (organ != null)
                    {
                        if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                        {
                            organ.ModeUsed = MODE;
                            this.OrganUsedInSelecteur.Add(organ);
                        }
                    }

                    organ = this.GetOrganeByName(selecteur.BtDecrementer);
                    if (organ != null)
                    {
                        if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                        {
                            organ.ModeUsed = MODE;
                            this.OrganUsedInSelecteur.Add(organ);
                        }
                    }

                    organ = this.GetOrganeByName(selecteur.BtPositionnerAValMax);
                    if (organ != null)
                    {
                        if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                        {
                            organ.ModeUsed = MODE;
                            this.OrganUsedInSelecteur.Add(organ);
                        }
                    }

                    organ = this.GetOrganeByName(selecteur.BtPositionnerAValMin);
                    if (organ != null)
                    {
                        if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                        {
                            organ.ModeUsed = MODE;
                            this.OrganUsedInSelecteur.Add(organ);
                        }
                    }
                }
            }

            // Evaluer le sélecteur de mode également
            organ = this.GetOrganeByName(PegaseData.Instance.ParamHorsMode.NavigationDec);
            if (organ != null)
            {
                if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                {
                    organ.ModeUsed = ALL;
                    this.OrganUsedInSelecteur.Add(organ);
                }
            }

            organ = this.GetOrganeByName(PegaseData.Instance.ParamHorsMode.NavigationInc);
            if (organ != null)
            {
                if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                {
                    organ.ModeUsed = ALL;
                    this.OrganUsedInSelecteur.Add(organ);
                }
            }

            organ = this.GetOrganeByName(PegaseData.Instance.ParamHorsMode.NavigationPosValMax);
            if (organ != null)
            {
                if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                {
                    organ.ModeUsed = ALL;
                    this.OrganUsedInSelecteur.Add(organ);
                }
            }

            organ = this.GetOrganeByName(PegaseData.Instance.ParamHorsMode.NavigationPosValMin);
            if (organ != null)
            {
                if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                {
                    organ.ModeUsed = ALL;
                    this.OrganUsedInSelecteur.Add(organ);
                }
            }

            // pour le selecteur de mode ajouter également le bouton utilisé pour le selecteur mécanique s'il y a lieu
            organ = this.GetOrganeByName(PegaseData.Instance.ParamHorsMode.NavigationSelecteurPosition);
            if (organ != null)
            {
                if (!this.VerifyIfOrganExistInCollection(this.OrganUsedInSelecteur, organ))
                {
                    organ.ModeUsed = ALL;
                    this.OrganUsedInSelecteur.Add(organ);
                }
            }
        } // endMethod: MajOrgansUsedInSelecteur
        
        /// <summary>
        /// Acquérir un organe par son nom (F1, F2...)
        /// </summary>
        public OrganCommand GetOrganeByName ( String Name )
        {
            OrganCommand Result = null;

            var Query = from organ in PegaseData.Instance.MOperateur.OrganesCommandes
                        where organ.NomOrganeMO == Name
                        select organ;

            if (Query.Count() > 0)
            {
                Result = Query.First();
            }

            return Result;
        } // endMethod: GetOrganeByName
        
        /// <summary>
        /// Acquérir un organe par son mnémologique (BOUTON_01, BOUTON_02...)
        /// </summary>
        public OrganCommand GetOrganeByMnemologique ( String Mnemologique )
        {
            OrganCommand Result = null;

            var Query = from organ in PegaseData.Instance.MOperateur.OrganesCommandes
                        where organ.Mnemologique == Mnemologique
                        select organ;

            if (Query.Count() > 0)
            {
                Result = Query.First();
            }

            return Result;
        } // endMethod: GetOrganeByMnemologique
        
        /// <summary>
        /// Vérifier si un organe existe dans une collection d'organe
        /// </summary>
        public Boolean VerifyIfOrganExistInCollection ( ObservableCollection<OrganCommand> Organs, OrganCommand Organ )
        {
            Boolean Result = false;

            if (Organs.Contains(Organ))
            {
                Result = true;
            }

            return Result;
        } // endMethod: VerifyIfOrganExistInCollection

        /// <summary>
        /// Initialiser les masques utilisateurs par mode
        /// </summary>
        public void InitUserModeMask ( )
        {
            this.UserModeMask = new MaskUserMode[MAX_MASK_BY_MODE];

            // Si les éléments XML existent effectuer l'initialisation à partir de là
            if (this._navUserModeMasks != null)
            {
                ObservableCollection<XElement> XUsers = this._navUserModeMasks.GetNodeByPath("Users");
                Int32 NbMask = XUsers.Count;
                if (NbMask > MAX_MASK_BY_MODE)
                {
                    NbMask = MAX_MASK_BY_MODE;
                }

                for (int i = 0; i < NbMask; i++)
                {
                    XMLCore.XMLProcessing navMask = new XMLCore.XMLProcessing();
                    navMask.OpenXML(XUsers[i]);
                    ObservableCollection<XElement> XMask32l = navMask.GetNodeByPath("MasqueBoutonsToggle");
                    ObservableCollection<XElement> XMask16l = navMask.GetNodeByPath("MasqueCom12AxesPot");
                    XElement XMask32, XMask16;

                    if (XMask32l != null)
                    {
                        XMask32 = XMask32l.First();
                    }
                    else
                    {
                        XMask32 = null;
                    }

                    if (XMask16l != null)
                    {
                        XMask16 = XMask16l.First();
                    }
                    else
                    {
                        XMask16 = null;
                    }

                    this.UserModeMask[i] = new MaskUserMode(XMask32, XMask16);
                }

                // Si le nombre de masque dans le fichier n'est pas suffisant, compléter...
                if (XUsers.Count < MAX_MASK_BY_MODE)
                {
                    for (int i = XUsers.Count; i < MAX_MASK_BY_MODE; i++)
                    {
                        this.UserModeMask[i] = new MaskUserMode((UInt32)0xFFFFFFFF, (UInt16)0xFFFF);
                    }
                }
            }
            else
            {
                for (int i = 0; i < 4; i++)
                {
                    this.UserModeMask[i] = new MaskUserMode((UInt32)0xFFFFFFFF, (UInt16)0xFFFF);
                }
            }
        } // endMethod: InitUserModeMask

        /// <summary>
        /// Initialiser les données des formules
        /// </summary>
        public void InitFormules ( )
        {
            ObservableCollection<XElement> Elements = this._navFormules.GetNodeByPath("Formules");
            if (PegaseData.Instance.ParamHorsMode.EquationTxt == null)
            {
                if (Elements != null)
                {
                    foreach (var formule in Elements)
                    {
                        Formule F = new Formule(formule);
                        if (F.Equations.Count > 0 || F.Fonction != "")
                        {
                            // Si aucune équation n'a été chargée, en ajouter une vide
                            if (F.Equations.Count == 0)
                            {
                                F.Equations.Add(new Equation(F));
                            }
                            this.Formules.Add(F);
                        }
                    }
                }
                else
                {
                    this.Formules = new ObservableCollection<Formule>();
                }
            }
        } // endMethod: InitFormules

        /// <summary>
        /// Initaliser les sélecteurs du mode
        /// </summary>
        public void InitSelecteur ( )
        {
            this._selecteurs = new ObservableCollection<Selecteur>();
            IEnumerable<XElement> Elements = this._navSelecteurs.GetNodeByPath("SelecteurMode/IdentSelecteur");

            if (Elements != null)
            {
                foreach (var item in Elements)
                {
                    String IdentSelecteur = item.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;
                    var Query = from row in PegaseData.Instance.OLogiciels.Selecteurs
                                where row.IdentSelecteur == IdentSelecteur
                                select row;

                    Selecteur Sel = Query.FirstOrDefault();
                    this._selecteurs.Add(Sel);
                } 
            }

            // Si moins de 6 sélecteurs ont été déclarés, les compléter
            if (this.Selecteurs.Count < 6)
            {
                for (int i = this.Selecteurs.Count; i < 6; i++)
                {
                    this.Selecteurs.Add(null);
                }
            }
        } // endMethod: InitSelecteur
        
        /// <summary>
        /// Initialiser un mode à partir des données XML
        /// </summary>
        public void InitMode ( )
        {
            // 1 - Initialiser la position du mode
            String text = this._navMode.GetNodeByPath("Position").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;
            Int32 PosMode;
            if (text != "")
            {
                PosMode = Convert.ToInt32(text);
            }
            else
            {
                PosMode = -1;
            }
            this.Position = PosMode;

            // 2 - Initialiser le ModeLabel
            String Id = this._navMode.GetNodeByPath("IdentLibelSelecteur").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;

            if (Id != "")
            {
                var Query = from row in PegaseData.Instance.OLogiciels.LibelSelecteurs
                            where row.IdentLibelSelecteur == Id
                            select row;

                this._modeLabel = Query.FirstOrDefault();
            }

            // 3 - Initialiser le commentaire
            text = this._navMode.GetValue("CommentaireMode", "", "", XMLCore.XML_ATTRIBUTE.VALUE);
            this.Commentaire = text;
        } // endMethod: InitMode

        /// <summary>
        /// Initialiser les retours d'informations liés aux modes
        /// </summary>
        public void InitInformation ( )
        {
            this._information = new ObservableCollection<Information>();
            ObservableCollection<XElement> XInformation = this._navRetoursInfo.GetNodeByPath("Retours/IdentRetourInformation");

            if (XInformation != null)
            {
                foreach (var item in XInformation)
                {
                    String IdentRetour = item.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;

                    var Query = from row in PegaseCore.PegaseData.Instance.OLogiciels.Informations
                                where row.IdentRetour == IdentRetour
                                select row;

                    this._information.Add(Query.FirstOrDefault());
                }
                // compléter le nombre de retours d'info jusqu'au maximum
                for (int i = this.Informations.Count; i < MaxInfoByMode; i++)
                {
                    this.Informations.Add(null);
                }
            }
        } // endMethod: InitInformation

        /// <summary>
        /// Initialiser les libellés d'un sélecteur par position
        /// </summary>
        private void InitLabelsSelecteurByPos( )
        {
            this._labelsSelecteurByPos = new ObservableCollection<ObservableCollection<SelecteurLabel>>();
            Int32 NumPosition = 0;
            Int32 NbLibelByPos = 0;

            // récupérer l'ensemble des libellés des selecteurs par position (6 positions)
            ObservableCollection<XElement> Positions = this._navSelecteurs.GetNodeByPath("LibellesSelecteur");

            if (Positions != null)
            {
                foreach (var position in Positions)
                {
                    // Déterminer le nombre de libellés pour la position
                    ObservableCollection<SelecteurLabel> Libels = new ObservableCollection<SelecteurLabel>();
                    if (this.Selecteurs[NumPosition] != null)
                    {
                        NbLibelByPos = this.Selecteurs[NumPosition].NbPosition;

                        // récupérer chacun des libellés des selecteurs pour chacune des positions
                        List<XElement> elements = position.Descendants("Variable").ToList();

                        for (Int32 i = elements.Count - 1; i >= 0; i--)
                        {
                            String value = elements[i].Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;
                            value = value.Trim();
                            if (value == "")
                            {
                                elements[i].Remove();
                                elements.Remove(elements[i]);
                            }
                        }

                        // S'il manque des libellés, les créés
                        if (elements.Count < NbLibelByPos)
                        {
                            for (int i = elements.Count; i < NbLibelByPos; i++)
                            {
                                // Ajouter un libellé sélecteur dans le dictionnaire des libellés sélecteurs
                                String IDLibelSelecteur = PegaseData.Instance.OLogiciels.AddLibelSelecteur().IdentLibelSelecteur;
                                // Ajouter une ligne libellé dans la balise des libellés du selecteur associé
                                this.AddLibelleSelecteur(position, IDLibelSelecteur);
                            }
                        }

                        // S'il y a trop de libellés, les supprimer
                        if (NbLibelByPos < elements.Count)
                        {
                            for (int i = NbLibelByPos; i < elements.Count; i++)
                            {
                                elements[i].Remove();
                                elements.Remove(elements[i]);
                            }
                        }

                        // récupérés les libellés
                        foreach (var labels in position.Descendants())
                        {
                            if (labels is XElement)
                            {
                                if (labels.Attribute(XMLCore.XML_ATTRIBUTE.CODE).Value == "IdentLibelSelecteur")
                                {
                                    String IdentLabel = labels.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value;
                                    var Query = from row in PegaseData.Instance.OLogiciels.LibelSelecteurs
                                                where row.IdentLibelSelecteur == IdentLabel
                                                select row;

                                    Libels.Add(Query.FirstOrDefault());
                                }
                            }
                        }
                    }
                    this._labelsSelecteurByPos.Add(Libels);
                    NumPosition++;
                }
            }
        } // endMethod: InitLabelsSelecteurByPos

        /// <summary>
        /// Initialiser le libellé de retour d'information
        /// </summary>
        private void InitLabelsInfoByPos ( )
        {
            this._labelsInfoByPos = new ObservableCollection<InfoByMode>();

            ObservableCollection<XElement> Elements = this._navRetoursInfo.GetNodeByPath("LibellesRetour");
            Int32 i = 0;

            if (Elements != null)
            {
                foreach (var item in Elements)
                {
                    Information I = this.Informations[i];
                    i++;
                    if (I != null)
                    {
                        if (I.IdentRetour != "")
                        {
                            InfoByMode IBM = new InfoByMode(item, I);
                            this._labelsInfoByPos.Add(IBM);
                        }
                        else
                        {
                            this._labelsInfoByPos.Add(null);
                        }
                    }
                    else
                    {
                        this._labelsInfoByPos.Add(null);
                    }
                }
            }

            // compléter le nombre de retours d'info jusqu'au maximum
            for (i = this._labelsInfoByPos.Count; i < MaxInfoByMode; i++)
            {
                this.LabelsInfoByPos.Add(null);
            }
        } // endMethod: InitLabelsInfoByPos
        
        /// <summary>
        /// Effacer toutes les informations du mode
        /// </summary>
        public void Remove()
        {
            this._navMode.RootNode.Remove();
            this._navInterverouillage.RootNode.Remove();
            this._navFormules.RootNode.Remove();
            this._navRetoursInfo.RootNode.Remove();
            this._navSelecteurs.RootNode.Remove();
        } // endMethod: Dispose

        /// <summary>
        /// Enregistrer les données du mode dans le noeud XML transmis
        /// </summary>
        public void SerialiseMode(XElement Mode, XElement Interverouillage, XElement Selecteurs, XElement RetoursInfo, XElement Formules, List<AnalyseEquation.EquationBymode> list)
        {
            // 0 - Initialisation des différents navigateurs XML
            XMLCore.XMLProcessing XPMode = new XMLCore.XMLProcessing();
            XPMode.OpenXML(Mode);

            XMLCore.XMLProcessing XPInterverouillage = new XMLCore.XMLProcessing();
            XPInterverouillage.OpenXML(Interverouillage);

            XMLCore.XMLProcessing XPSelecteurs = new XMLCore.XMLProcessing();
            XPSelecteurs.OpenXML(Selecteurs);

            XMLCore.XMLProcessing XPRetoursInfo = new XMLCore.XMLProcessing();
            XPRetoursInfo.OpenXML(RetoursInfo);

            XMLCore.XMLProcessing XPFormules = new XMLCore.XMLProcessing();
            XPFormules.OpenXML(Formules);

            // 1 - Enregistrer la position du mode
            XPMode.GetNodeByPath("Position").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this.Position.ToString();

            // 2 - Enregistrer le ModeLabel
            if (this._modeLabel != null)
            {
                XPMode.GetNodeByPath("IdentLibelSelecteur").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this._modeLabel.IdentLibelSelecteur; 
            }

            // 3 - Enregistrer les liens avec les sélecteurs
            ObservableCollection<XElement> selecteurs = XPSelecteurs.GetNodeByPath("SelecteurMode/IdentSelecteur");

            for (int i = 0; i < selecteurs.Count(); i++)
            {
                String Value;
                if (this.Selecteurs[i] != null)
                {
                    Value = this.Selecteurs[i].IdentSelecteur;
                }
                else
                {
                    Value = "";
                }

                selecteurs[i].Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = Value;
            }

            // 4 - Enregistrer les liens avec les libellés sélecteurs
            ObservableCollection<XElement> Positions = XPSelecteurs.GetNodeByPath("LibellesSelecteur");

            if (Positions != null)
            {
                for (int j = 0; j < Positions.Count; j++)
                {
                    // ajouter chacun des libellés des selecteurs pour chacune des positions

                    for (int k = 0; k < this.LabelsSelecteurByPos[j].Count; k++)
                    {
                        XElement label = XElement.Parse("<Variable code=\"IdentLibelSelecteur\" description=\"Descrip_IdentLibelSelecteur\" commentaire=\"Com_IdentLibelSelecteur\" offsetAbsolu=\"-1\" offsetRelatif=\"-1\" taille=\"30\" type=\"String\" count=\"-1\" min=\"\" max=\"\" commentairePlageValeur=\"\" plagevaleur=\"Plage_IdentLibelSelecteur\" valeur=\"LIBEL_04\" indice=\"-1\" unite=\"\" countmax=\"-1\" Num=\"-1\" />");
                        Positions[j].Add(label);
                        if (this.LabelsSelecteurByPos[j][k] != null)
                        {
                            label.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this.LabelsSelecteurByPos[j][k].IdentLibelSelecteur; 
                        }
                    }
                }
            }

            // 5 - Enregistrer les liens avec les retours d'informations
            ObservableCollection<XElement> RI = XPRetoursInfo.GetNodeByPath("Retours/IdentRetourInformation");

            if (this.Informations != null)
            {
                for (int i = 0; i < this.Informations.Count; i++)
                {
                    String Value;

                    if (this.Informations[i] != null)
                    {
                        Value = this.Informations[i].IdentRetour;
                    }
                    else
	                {
                        Value = "";
	                }
                    if (RI.Count > i && RI[i] != null)
                    {
                        RI[i].Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = Value;
                    }
                }
            }

            // 6 - Enregistrer les liens avec les libellés des retours d'information
            ObservableCollection<XElement> LRI = XPRetoursInfo.GetNodeByPath("LibellesRetour");

            if (this.LabelsInfoByPos != null)
            {
                for (int i = 0; i < LRI.Count && i < this.LabelsInfoByPos.Count; i++)
                {
                    if (this.LabelsInfoByPos != null)
                    {
                        String SValue;
                        XMLCore.XMLProcessing XProcess = new XMLCore.XMLProcessing();
                        XProcess.OpenXML(LRI[i]);
                        SValue = "";
                        if (this.LabelsInfoByPos[i] != null)
                        {
                            // Enregistrer l'ID du Retour d'info
                            if (this.LabelsInfoByPos[i].InfoLibelRetour == null)
                            {
                                SValue = "";
                            }
                            else
                            {
                                SValue = this.LabelsInfoByPos[i].InfoLibelRetour.IdentLibelInformation;
                            }
                            XProcess.GetNodeByPath("LibelRetour").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = SValue;

                            if (this.LabelsInfoByPos[i].InfoLibelUnit == null)
                            {
                                SValue = "";
                            }
                            else
                            {
                                SValue = this.LabelsInfoByPos[i].InfoLibelUnit.IdentLibelInformation;
                            }
                            XProcess.GetNodeByPath("LibelUnité").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = SValue;

                            if (this.LabelsInfoByPos[i].InfoLibelMin == null)
                            {
                                SValue = "";
                            }
                            else
                            {
                                SValue = this.LabelsInfoByPos[i].InfoLibelMin.IdentLibelInformation;
                            }
                            XProcess.GetNodeByPath("LibelMin").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = SValue;

                            if (this.LabelsInfoByPos[i].InfoLibelMax == null)
                            {
                                SValue = "";
                            }
                            else
                            {
                                SValue = this.LabelsInfoByPos[i].InfoLibelMax.IdentLibelInformation;
                            }
                            XProcess.GetNodeByPath("LibelMax").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = SValue;

                            // Libellés suivant valeurs numériques
                            IEnumerable<XElement> libelVarNum = XProcess.GetNodeByPath("LibelVarNumerique");
                            XElement varnumcopy = libelVarNum.Last();
                            Int32 j = 0;

                            foreach (var libel in libelVarNum)
                            {
                                if (this.LabelsInfoByPos[i].LibelsVarNumerique[j] != null)
                                {
                                    libel.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this.LabelsInfoByPos[i].LibelsVarNumerique[j].IdentLibelInformation;
                                    libel.Attribute(XMLCore.XML_ATTRIBUTE.INDICE).Value = (j+1).ToString();
                                }
                                j++;
                            }

                            // test
                            // calcul du nombre de libel numerique
                            int nblibem = 0;
                            for( int cmp = j; cmp< this.LabelsInfoByPos[i].LibelsVarNumerique.Count(); cmp++)
                            {
                                if ((this.LabelsInfoByPos[i].LibelsVarNumerique[cmp] != null)&&
                                    (!String.IsNullOrEmpty(this.LabelsInfoByPos[i].LibelsVarNumerique[cmp].IdentLibelInformation)))
                                {
                                    nblibem = cmp;
                                }
                            }

                            //XElement libelretour = XProcess.GetNodeByPath("LibellesRetour").First();
                             XElement libelxml = libelVarNum.Last();
                            
                            for (int cmp = j; cmp <= nblibem; cmp++)
                            {
                                if ((this.LabelsInfoByPos[i].LibelsVarNumerique[cmp] != null) &&
                                    (!String.IsNullOrEmpty(this.LabelsInfoByPos[i].LibelsVarNumerique[cmp].IdentLibelInformation)))
                                {
                                    XElement copy = new XElement(varnumcopy);
                                    copy.Attribute(XML_ATTRIBUTE.INDICE).Value = (cmp + 1).ToString();
                                    copy.Attribute(XML_ATTRIBUTE.VALUE).Value = this.LabelsInfoByPos[i].LibelsVarNumerique[cmp].IdentLibelInformation;
                                    libelxml.AddAfterSelf(copy);
                                    libelxml = XProcess.GetNodeByPath("LibelVarNumerique").Last();
                                }
                            }
                        }
                    }
                }
            }

            // 7 - Enregitrer les équations du mode

            // 7.4 - Contruire la partie correspondante
           // if ((list == null) || ((list != null)&& (list.Count() == 0)))
           // {
                if (this.Formules.Count() > 0)
                {

                var QueryUniversal = from formule in this.Formules
                                     where formule.FormuleType != TypeFormule.AUTO
                                     select formule;

                List<Formule> Formule = QueryUniversal.ToList<Formule>();

                if (Formule != null)
                {
                    for (int i = Formule.Count - 1; i >= 0; i--)
                    {
                        this.Formules.Remove(Formule[i]);
                    }
                }
              //  this.Formules.Clear();
                    foreach (var formule in this.Formules)
                    {

                        XElement XFormule = XElement.Parse(DefaultXMLTemplate.Instance.TemplateFormuleMode);
                        XMLCore.XMLProcessing XPF = new XMLCore.XMLProcessing();
                        XPF.OpenXML(XFormule);

                        XPF.GetNodeByPath("DescripteurFormule/Commandes").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.Commandes;
                        XPF.SetValue("DescripteurFormule/CommentaireFormule", "", "", XMLCore.XML_ATTRIBUTE.PLAGE_VALEUR, formule.FormuleType.ToString());
                        XPF.GetNodeByPath("DescripteurFormule/CommentaireFormule").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.CommentaireFormule;
                        XPF.GetNodeByPath("DescripteurFormule/Fonction").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.Fonction;
                        XPF.GetNodeByPath("DescripteurFormule/Fonctionnement").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.Fonctionnement;
                        XPF.GetNodeByPath("DescripteurFormule/MnemoLogiquePhy").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.MnemoLogiquePhy;
                        XPF.GetNodeByPath("DescripteurFormule/NbEquation").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.NbEquation.ToString();
                        XPF.GetNodeByPath("DescripteurFormule/NumModeExploit").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this.Position.ToString(); //formule.NumModeExploit.ToString();

                        XElement TableEquation = XPF.GetNodeByPath("TableEquation").First();

                        // 7.4.1 - Recopier les bonnes données dans la formule
                        foreach (var equation in formule.Equations)
                        {
                            // 7.4.2 - Ajouter les équations
                            XElement XMnemo = XElement.Parse(DefaultXMLTemplate.Instance.TemplateMnemologique);
                            XMnemo.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = equation.MnemoLogique;
                            XElement XEquation = XElement.Parse(DefaultXMLTemplate.Instance.TemplateEquation);
                            XEquation.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = equation.TextEquation;
                            // 7.4.3 - Ajouter les deux noeuds à la table
                            TableEquation.Add(XMnemo);
                            TableEquation.Add(XEquation);
                        }
                        // 7.4.4 - Ajouter le noeud en tant qu'enfant du noeud Formules
                        Formules.Add(XPF.RootNode);
                    }
                }
            // }
            // else
            if ((list != null) && (list.Count() > 0))
                {
                foreach (var formule in list)
                {
                    if (formule.mode.Equals(this.Position))
                    {
                        Formule NewFormule = new Formule(this.Position);
                        Equation equation = new Equation("Flowdocument", formule.equation, NewFormule);
                        NewFormule.Equations.Add(equation);
                        this.Formules.Add(NewFormule);


                          XElement XFormule = XElement.Parse(DefaultXMLTemplate.Instance.TemplateFormuleMode);
                        XMLCore.XMLProcessing XPF = new XMLCore.XMLProcessing();
                        XPF.OpenXML(XFormule);

                        XPF.GetNodeByPath("DescripteurFormule/Commandes").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "Commands";
                        XPF.SetValue("DescripteurFormule/CommentaireFormule", "", "", XMLCore.XML_ATTRIBUTE.PLAGE_VALEUR, "Equation from flowdocument");
                        XPF.GetNodeByPath("DescripteurFormule/CommentaireFormule").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "None";
                        XPF.GetNodeByPath("DescripteurFormule/Fonction").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "FunctionfromFlowdocument";
                        XPF.GetNodeByPath("DescripteurFormule/Fonctionnement").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "none";
                        XPF.GetNodeByPath("DescripteurFormule/MnemoLogiquePhy").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "Mode" + this.Position.ToString() + "Flowdocument";
                        XPF.GetNodeByPath("DescripteurFormule/NbEquation").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "1";
                        XPF.GetNodeByPath("DescripteurFormule/NumModeExploit").First().Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = this.Position.ToString(); //formule.NumModeExploit.ToString();

                        XElement TableEquation = XPF.GetNodeByPath("TableEquation").First();

                        // 7.4.1 - Recopier les bonnes données dans la formule

                        // 7.4.2 - Ajouter les équations
                        XElement XMnemo = XElement.Parse(DefaultXMLTemplate.Instance.TemplateMnemologique);
                        XMnemo.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = "Flowdocument";
                        XElement XEquation = XElement.Parse(DefaultXMLTemplate.Instance.TemplateEquation);
                        XEquation.Attribute(XMLCore.XML_ATTRIBUTE.VALUE).Value = formule.equation;
                        // 7.4.3 - Ajouter les deux noeuds à la table
                        TableEquation.Add(XMnemo);
                        TableEquation.Add(XEquation);

                        // 7.4.4 - Ajouter le noeud en tant qu'enfant du noeud Formules
                        Formules.Add(XPF.RootNode);
                    }
                }
            }
            
        } // endMethod: SerialiseMode

        /// <summary>
        /// Retirer le sélecteur
        /// </summary>
        public void RemoveSelecteur ( Selecteur Sel )
        {
            // 0 - Supprimer le sélecteur du mode
            for( Int32 i = 0; i < this.Selecteurs.Count; i++)
            {
                if (this.Selecteurs[i] == Sel)
                {
                    this.Selecteurs[i] = null;
                    this.LabelsSelecteurByPos[i] = new ObservableCollection<SelecteurLabel>();
                }
            }

            // 1 - Supprimer le selecteur du dico sélecteur
            PegaseData.Instance.OLogiciels.DeleteSelecteur(Sel);

            // 2 - Optimiser les libellés sélecteurs afin de supprimer les orphelins
            //PegaseData.Instance.OLogiciels.OptimiseLibelSelecteur();
            // -> à faire après l'appel si c'est voulu
        } // endMethod: RemoveSelecteur
        
        /// <summary>
        /// Supprimer le retour d'information désigné par IBM
        /// </summary>
        public void RemoveRI ( Int32 Pos )
        {
            PegaseData.Instance.OLogiciels.DeleteRetourInfo(this.Informations[Pos]);
            this.LabelsInfoByPos[Pos] = null;
            this.Informations[Pos] = null;
        } // endMethod: RemoveRI

        /// <summary>
        /// Ajouter un retour d'information à une position
        /// </summary>
        public InfoByMode AddRInformation ( Int32 position, RIType typeRI )
        {
            InformationLabel labelRetour = null;
            InformationLabel labelUnit = null;
            InformationLabel labelMin = null;
            InformationLabel labelMax = null;

            // 1 - Ajouter le retour d'information dans le dictionnaire
            InfoByMode Result;
            Information info = PegaseData.Instance.OLogiciels.AddRetourInfo();
            info.TypeVariable = typeRI;

            if (info.TypeVariable == RIType.RIANA)
            {
                if (info.EAna != null)
                {
                    info.IsLienAna = true;
                }
            }

            this.Informations[position] = info;
            // 2 - Ajouter les libellés liés
            if (info.TypeVariable != RIType.RIVARNUM)
            {
                labelRetour = PegaseData.Instance.OLogiciels.AddLibelRetourInfo();
                labelMin = PegaseData.Instance.OLogiciels.AddLibelRetourInfo();
                labelMax = PegaseData.Instance.OLogiciels.AddLibelRetourInfo();

                if (typeRI == RIType.RIANA)
                {
                    labelUnit = PegaseData.Instance.OLogiciels.AddLibelRetourInfo();
                }
            }

            Result = new InfoByMode(info, labelRetour, labelUnit, labelMax, labelMin );
            this.LabelsInfoByPos[position] = Result;
            if (info.TypeVariable == RIType.RIVARNUM)
            {
                Result.Information.ValMax = 15;
            }

            return Result;
        } // endMethod: AddRInformation

        /// <summary>
        /// Ajouter un libellé de retour d'information
        /// </summary>
        public InformationLabel AddRInformationLabel ( String position, String IDRLibelInformation )
        {
            InformationLabel Result = new InformationLabel(IDRLibelInformation);
            
            return Result;
        } // endMethod: AddRInformationLabel

        /// <summary>
        /// Assigner un sélecteur à une position
        /// </summary>
        public Selecteur AddSelecteur(String position, Selecteur selecteur)
        {
            Selecteur Result = null;
            Int32 NumSelecteur;

            position = position.Substring(0, position.Length - 4);
            // Reporter le résultat à la bonne position
            switch (position)
            {
                case "selecteur_01":
                    NumSelecteur = 0;
                    break;
                case "selecteur_02":
                    NumSelecteur = 1;
                    break;
                case "selecteur_03":
                    NumSelecteur = 2;
                    break;
                case "selecteur_04":
                    NumSelecteur = 3;
                    break;
                case "selecteur_05":
                    NumSelecteur = 4;
                    break;
                case "selecteur_06":
                    NumSelecteur = 5;
                    break;
                default:
                    NumSelecteur = -1;
                    break;
            }

            if (NumSelecteur != -1)
            {
                this.Selecteurs[NumSelecteur] = selecteur;
            }

            // Mise à jour des libellés sélecteurs
            this.LabelsSelecteurByPos[NumSelecteur].Clear();
            for (int i = 0; i < this.Selecteurs[NumSelecteur].NbPosition; i++)
            {
                String ID = PegaseData.Instance.OLogiciels.GetLibelSelecteurID();
                SelecteurLabel sl = new SelecteurLabel(ID);
                PegaseData.Instance.OLogiciels.LibelSelecteurs.Add(sl);
                this.LabelsSelecteurByPos[NumSelecteur].Add(sl);
            }

            Result = selecteur;
            return Result;
        } // endMethod: SetCurrentSelecteur
        
        /// <summary>
        /// Ajouter un libellé sélecteur pour le sélecteur spécifié
        /// </summary>
        public void AddLibelleSelecteur ( XElement position, String IDLibelSelecteur )
        {
            String LibelleSelecteur;
            LibelleSelecteur = String.Format("<Variable code=\"IdentLibelSelecteur\" description=\"Descrip_IdentLibelSelecteur\" commentaire=\"Com_IdentLibelSelecteur\" offsetAbsolu=\"-1\" offsetRelatif=\"-1\" taille=\"30\" type=\"String\" count=\"-1\" min=\"\" max=\"\" commentairePlageValeur=\"\" plagevaleur=\"Plage_IdentLibelSelecteur\" valeur=\"{0}\" indice=\"-1\" unite=\"\" countmax=\"-1\" Num=\"-1\" />", IDLibelSelecteur);
            XElement element = XElement.Parse(LibelleSelecteur);
            position.Add(element);
        } // endMethod: AddLibelleSelecteur

        /// <summary>
        /// Insérer une nouvelle fonction à la position spécifiée
        /// </summary>
        public void AddFunction ( Int32 Pos )
        {
            if (Pos == -1)
            {
                Pos = 0;
            }
            Formule F = new Formule(this.Position);

            this.Formules.Insert(Pos, F);
        } // endMethod: AddFunction
        
        /// <summary>
        /// Supprimer la fonction
        /// </summary>
        public void DeleteFunction ( Formule F )
        {
            this.Formules.Remove(F);
        } // endMethod: DeleteFunction
        
        /// <summary>
        /// Déplacer la fonction spécifiée vers le haut
        /// </summary>
        public void MoveFunctionUp ( Formule F )
        {
            Int32 i = this.Formules.IndexOf(F);

            if (i > 0)
            {
                this.Formules.Move(i, i - 1);
            }
        } // endMethod: MoveFunctionUp
        
        /// <summary>
        /// Déplacer la fonction spécifiée d'un cran vers le bas
        /// </summary>
        public void MoveFunctionDown ( Formule F )
        {
            Int32 i = this.Formules.IndexOf(F);

            if (i < this.Formules.Count - 1)
            {
                this.Formules.Move(i, i + 1);
            }
        } // endMethod: MoveDown

        #endregion

        // Messages
        #region Messages

        #endregion

    } // endClass: ModeExploitation
}
