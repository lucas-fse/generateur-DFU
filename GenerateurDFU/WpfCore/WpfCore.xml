<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>WpfCore</name>
  </assembly>
  <members>
    <member name="T:JAY.CommandMessage">
      <summary>
Classe définissant un message de commande paramétrable</summary>
    </member>
    <member name="M:JAY.CommandMessage.#ctor(System.Object,System.String)">
      <summary>
Initializes a new instance of the $LS$topic_00000000000002DC$SL$$LE$CommandMessage$EL$ class.</summary>
      <param name="sender">
The source of the event.</param>
      <param name="Command">
</param>
    </member>
    <member name="P:JAY.CommandMessage.Command">
      <summary>
La commande véhiculée par le message</summary>
    </member>
    <member name="N:JAY.WpfCore">
    </member>
    <member name="T:JAY.WpfCore.GraphicBtn">
    </member>
    <member name="M:JAY.WpfCore.GraphicBtn.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_00000000000002E0$SL$$LE$GraphicBtn$EL$ class.</summary>
    </member>
    <member name="P:JAY.WpfCore.GraphicBtn.ImageBkg">
      <summary>
Gets or sets the value of the $LS$topic_00000000000002E2$SL$$LE$ImageBkg$EL$ property. This is a dependency property.</summary>
    </member>
    <member name="T:JAY.WpfCore.GraphicGroupButton">
      <summary>
Un classe dérivée de la classe ToggleButton envoyant un message lorsque le bouton est cliqué</summary>
    </member>
    <member name="M:JAY.WpfCore.GraphicGroupButton.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_00000000000002E3$SL$$LE$GraphicGroupButton$EL$ class.</summary>
    </member>
    <member name="M:JAY.WpfCore.GraphicGroupButton.ButtonClick">
      <summary>
Envoyer un message spécifiant que le bouton a été cliqué</summary>
    </member>
    <member name="N:JAY.WpfCore.Converters">
    </member>
    <member name="T:JAY.WpfCore.Converters.ComboboxItem2String">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.ComboboxItem2String.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.ComboboxItem2String.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.ConvertBoolToBold">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.ConvertBoolToBold.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.ConvertBoolToBold.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.ConverterBase">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.ConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.ConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.Int2HexaString">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.Int2HexaString.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.Int2HexaString.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.LevelToColor">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.LevelToColor.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.LevelToColor.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.LevelToFontSize">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.LevelToFontSize.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.LevelToFontSize.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.StringValueToVisibility">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.StringValueToVisibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.StringValueToVisibility.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="T:JAY.WpfCore.Converters.VisibleIfTrue">
      <summary>
------------------------------------------------------------------------------ La classe ConverterBase fournit un convertisseur pour le DataBinding implémentant l'interface IValueConverter ------------------------------------------------------------------------------                         Auteur     : Claude BRUNET                         Année      : 2010                         Entreprise :</summary>
    </member>
    <member name="M:JAY.WpfCore.Converters.VisibleIfTrue.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode Convert permet de convertir une donnée depuis le ViewModel vers l'affichage par exemple, une heure peut être converti en degré pour afficher une aiguille, un nombre / texte peut être converti en couleur...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis le viewmodel</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
    <member name="M:JAY.WpfCore.Converters.VisibleIfTrue.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
La méthode ConvertBack permet de convertir une valeur depuis l'interface vers le ViewModel Par exemple, le degré de rotation d'une aiguille peut être converti en heure, une couleur en texte / nombre ...</summary>
      <returns>
object -&gt; la valeur convertie</returns>
      <param name="value">
object value -&gt; un objet contenant la valeur initial reçue depuis la View</param>
      <param name="targetType">
Type targetType -&gt; un type définissant le type de valeur attendu après conversion</param>
      <param name="parameter">
object parameter -&gt; des paramètres pouvant être transmis lors du databinding (sous Blend 4)</param>
      <param name="culture">
object culture -&gt; la culture d'utilisation du logiciel (français, anglais...)</param>
    </member>
  </members>
</doc>
